# -------------------------------------------
# ğŸ“˜ CONTACTS DATA ANALYSIS NOTEBOOK (Enhanced)
# -------------------------------------------

import pandas as pd
import warnings
warnings.filterwarnings("ignore")

# ğŸŸ¢ Step 1: Load dataset
df = pd.read_csv("/kaggle/input/new-contact/dataset_100rows.csv")

# ğŸŸ¢ Step 2: Preview the dataset
print("ğŸ”¹ First 5 records:")
display(df.head())

print("\nğŸ”¹ Basic Info:")
df.info()

# -------------------------------------------
# ğŸ§­ SEARCH & FILTER FUNCTIONS
# -------------------------------------------

# ğŸ”¹ General search across all columns
def search_contact(keyword):
    result = df[df.apply(lambda row: row.astype(str).str.contains(keyword, case=False).any(), axis=1)]
    if not result.empty:
        display(result)
    else:
        print("No results found.")

  # ğŸ”¹ Filter by Age Range
def filter_by_age(min_age, max_age):
    result = df[(df['Age'] >= min_age) & (df['Age'] <= max_age)]
    print(f"\nğŸ”¹ Contacts aged between {min_age} and {max_age}:")
    display(result)

# ğŸ”¹ Filter by Gender
def filter_by_gender(gender):
    result = df[df['Gender'].str.lower() == gender.lower()]
    print(f"\nğŸ”¹ Contacts with gender = {gender}:")
    display(result)

# ğŸ”¹ Filter by Address / State
def filter_by_address(keyword):
    result = df[df['Address'].str.contains(keyword, case=False, na=False)]
    print(f"\nğŸ”¹ Contacts from {keyword}:")
    display(result)

# ğŸ”¹ Filter by Name Starting Letter
def filter_by_name_initial(initial):
    result = df[df['Name'].str.startswith(initial, na=False)]
    print(f"\nğŸ”¹ Contacts whose name starts with '{initial}':")
    display(result)

# ğŸ”¹ Filter by Contact Number Range
def filter_by_number_range(start, end):
    result = df[(df['Number'] >= start) & (df['Number'] <= end)]
    print(f"\nğŸ”¹ Contacts with numbers between {start} and {end}:")
    display(result)


# -------------------------------------------
# ğŸ§® Examples
# -------------------------------------------

print("\nğŸ”¹ Searching for name 'Aman':")
search_contact("Aman")

print("\nğŸ”¹ Contacts from Delhi:")
filter_by_address("DL")

print("\nğŸ”¹ Contacts aged between 20 and 30:")
filter_by_age(20, 30)

print("\nğŸ”¹ Female contacts:")
filter_by_gender("Female")

print("\nğŸ”¹ Names starting with 'A':")
filter_by_name_initial("A")

print("\nğŸ”¹ Numbers between 5000000000 and 8000000000:")
filter_by_number_range(5000000000, 8000000000)


# -------------------------------------------
# ğŸ§¾ Sorting Examples
# -------------------------------------------

print("\nğŸ”¹ Sorted by Name (A-Z):")
display(df.sort_values(by='Name'))

print("\nğŸ”¹ Sorted by Age (Youngest â†’ Oldest):")
display(df.sort_values(by='Age'))

# -------------------------------------------
# ğŸ“Š Basic Statistics
# -------------------------------------------

print("\nğŸ”¹ Basic Statistics:")
display(df.describe(include='all'))

# -------------------------------------------
# ğŸ’¾ Export Filtered Data (Optional)
# -------------------------------------------

# Example: Save all contacts older than 25 to a new CSV file
df[df['Age'] > 25].to_csv("filtered_contacts.csv", index=False)
print("\nâœ… Filtered contacts (Age > 25) saved to 'filtered_contacts.csv'")
